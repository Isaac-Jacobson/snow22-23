# -*- coding: utf-8 -*-
"""streakFlakeMatcher

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KORZPWk3VzuD8Kn3DJgwnZVmAYajhmfg
"""

import math

#Find the distance between a line represented by a slope and intersection point and a point
def findDistance(slope, sX, sY, pX, pY):
  d = abs(slope*((sX-pX)-(sY-pY)))/math.sqrt((slope*slope)+1)
  print("Distance: " + str(d)) #REMOVE
  return d

#Utility function to return nxm empty matrix of doubles
def makeMatrix(n, m):
  matrix = []
  for i in range(n):
    inner = []
    for j in range(m):
        inner.append(0.0)
    matrix.append(inner)
  return matrix

#Create a matrix of distances using a list of lines and points
#Lines is a nx3 list where n is the number of lines and for each one the 3
#values represent slope, x of intersect point, y or intersect point.
#Points is a nx2 matrix representing points
def distanceMatrix(lines, dots):
  numStreaks = len(lines)
  numPoints = len(dots)
  dMatrix = makeMatrix(numStreaks, numPoints)
  for i in range(0, numStreaks):
    for j in range(0, numPoints):
      dMatrix[i][j] = findDistance(lines[i][0], lines[i][1], lines[i][2], dots[j][0], dots[j][1])
  return dMatrix

#Find the total distance for the given pairing
#pairings is a list of tuples reprresenting the streak and point
def findTotalDistance(pairings, dMatrix):
  sum = 0
  for i in range(0, len(pairings)):
    sum += dMatrix[pairings[i][0]][pairings[i][1]]
  return sum

#Finds the "optimal" pairing of streaks to points from the given distance matrix
def findPairings(dMatrix):

